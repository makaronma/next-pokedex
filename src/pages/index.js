import Head from "next/head";

import PokeItem from "common/components/PokeDisplay/Item";
import AdvanceSearch from "common/components/PokeDisplay/AdvanceSearch";
import { useState, useMemo } from "react";
import { getAllPokes, getAllTypesName } from "common/utils/pokeApi";
import NormalSearch from "common/components/PokeDisplay/NormalSearch";
import usePokeSearch from "common/hooks/usePokeSearch";
import SearchBtn from "common/components/PokeDisplay/SearchBtn";
import DisplayPanel from "common/components/PokeDisplay/DisplayPanel";
import usePokeDisplay from "common/hooks/usePokeDisplay";

export default function Home({ pokes, types, loadMoreAmount }) {
  const [conditions, setConditions] = useState({ keyword: "", types: [] });
  const [conditionsBeforeSearch, setConditionsBeforeSearch] = useState({
    keyword: "",
    types: [],
  });

  const filteredPokes = usePokeSearch(pokes, conditions);
  const { pokesDisplay, hasMore, setPage } = usePokeDisplay(
    pokes,
    loadMoreAmount,
    filteredPokes
  );

  const searchOnClick = () => {
    setConditions(conditionsBeforeSearch);
  };

  const pokesItems = useMemo(() => {
    return (
      <>
        {pokesDisplay.map((poke) => (
          <PokeItem
            key={`pokeListItem-${poke.id}`}
            pokeId={`${poke.id}`}
            name={poke.name}
            img={poke.image}
          />
        ))}
      </>
    );
  }, [pokesDisplay]);

  return (
    <div>
      <Head>
        <title>PokeDex</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NormalSearch setConditions={setConditionsBeforeSearch} />
      <SearchBtn onClick={searchOnClick} />
      <AdvanceSearch types={types} setConditions={setConditionsBeforeSearch} />
      <DisplayPanel
        pokesDisplay={pokesDisplay}
        pokesItems={pokesItems}
        hasMore={hasMore}
        setPage={setPage}
      />
    </div>
  );
}

export async function getStaticProps() {
  const pokes = await getAllPokes();
  const types = await getAllTypesName();
  const loadMoreAmount = parseInt(process.env.LOADMOREAMOUNT);

  return {
    props: {
      pokes,
      types,

      loadMoreAmount,
    },
  };
}
